{
  "filePath": "src\\captureCodebase.ts",
  "summary": "<summary> <purpose>The primary purpose of this code is to capture the structure and content of a codebase based on inclusion patterns specified in a CSV file. It recursively scans the directory structure, reads file contents, and generates a formatted output that can be used for various purposes, such as code indexing, search, or analysis.</purpose> <key_components> - `CodebaseCapture` class: Responsible for managing the codebase capture process, including loading inclusion patterns, scanning directories, and formatting the output. - `FileInfo` interface: Represents the information of a single file, including its path and content. - `DirectoryStructure` interface: Represents the structure of a directory, containing a list of files and a map of subdirectories. - `IncludePattern` interface: Represents a pattern for including files in the capture, which can be either a simple glob pattern or a regular expression. </key_components> <dependencies> - `fs` (Node.js built-in filesystem module) - `path` (Node.js built-in path module) </dependencies> <unique_characteristics> - Supports both simple glob patterns and regular expressions for file inclusion. - Maintains a set of default ignore patterns for common directories and files. - Provides error handling for file reading and directory scanning. - Outputs the captured codebase structure and content to a 'paste.txt' file. - Supports command-line execution with optional arguments for the root directory and patterns file. </unique_characteristics> <methods> - `parsePatternInput()`: Parses the include pattern input from the CSV file. - `loadPatterns()`: Loads the include patterns from the CSV file. - `shouldCapture()`: Determines if a file or directory should be included in the capture based on the inclusion patterns. - `readFileContent()`: Reads the content of a file with error handling. - `scanDirectory()`: Recursively scans a directory and constructs its directory structure. - `formatOutput()`: Formats the directory structure into a string output. - `capture()`: Executes the codebase capture process. </methods> <exports if any> - None (this is a standalone script) </exports if any> <any other information that you think an llm looking at a summary of all files in the repo would need to know> The `captureCodebase.ts` file is a standalone script that can be executed from the command line. It provides a way to capture the structure and content of a codebase based on inclusion patterns specified in a CSV file. The captured data is saved to a 'paste.txt' file, which can be used for various purposes, such as code indexing, search, or analysis. </any other information...> </summary>",
  "lastUpdated": "2025-01-30T19:00:51.106Z",
  "fileHash": "3babb57c439c307364aeb2abe805994a"
}