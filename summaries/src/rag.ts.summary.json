{
  "filePath": "src\\rag.ts",
  "summary": "<summary> <purpose>The primary purpose of this code is to generate summaries of files in a project directory, with a focus on creating summaries that are optimized for retrieval augmented generation (RAG) systems and can aid in semantic search and question answering.</purpose> <key_components> - Key classes/interfaces: SummaryMetadata, Config - Main exported functions: generateSummary, saveSummary, shouldProcessFile, needsNewSummary, getSummaryMetadata, processFile, walkDirectory, main - Critical type definitions: SummaryMetadata, Config - Notable algorithms or patterns: Retrieval Augmented Generation (RAG) summary generation, file processing and traversal, summary metadata management </key_components> <dependencies> - npm dependencies: @anthropic-ai/sdk, dotenv - Peer dependencies: fs, path, crypto </dependencies> <unique_characteristics> - Implements a RAG-specific summary generation process that aims to identify key entities, concepts, relationships, and domain-specific language, while preserving important technical details and edge cases. - Employs a file processing pipeline that checks for changes, generates new summaries as needed, and saves the summaries in a dedicated directory. - Provides dynamic prompt construction based on file extensions to tailor the summary generation to different file types (e.g., .ts, .json, .txt, .jsx). - Includes robust error handling and sanitization to ensure the integrity of the generated summaries. </unique_characteristics> <methods> - calculateFileHash - generateSummary - saveSummary - shouldProcessFile - needsNewSummary - getSummaryMetadata - processFile - walkDirectory - main </methods> <exports if any> - generateSummary - saveSummary - shouldProcessFile - needsNewSummary - getSummaryMetadata - processFile - walkDirectory - main </exports if any> The code also includes several helper functions to dynamically construct prompts and extract information based on file extensions, as well as a utility to truncate content for brevity. The main entry point is the `main()` function, which orchestrates the entire summary generation process. </summary>",
  "lastUpdated": "2025-01-30T19:01:03.093Z",
  "fileHash": "c8f5dd13dfdb88db67bc505f7cb26c68"
}