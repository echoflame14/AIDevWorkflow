{
  "filePath": "src\\rag.ts",
  "summary": "<summary>   <purpose>The rag.ts file is the main entry point for a Retrieval Augmented Generation (RAG) system. It handles the process of generating summaries for files in a project, saving them, and managing the summary metadata.</purpose>   <key_components>     - Key classes/interfaces and their responsibilities:       - SummaryMetadata: Defines the structure of the summary metadata stored in JSON files       - Config: Holds the configuration settings for the RAG system     - Main exported functions/constants:       - generateSummary: Generates a summary for a given file using the Anthropic API       - saveSummary: Saves the generated summary to a JSON file       - shouldProcessFile: Determines if a file should be processed based on the configured ignore rules       - needsNewSummary: Checks if a new summary needs to be generated for a file       - getSummaryMetadata: Retrieves the metadata for an existing summary       - processFile: Orchestrates the summary generation and saving process for a single file       - walkDirectory: Recursively processes all files in a directory     - Critical type definitions:       - SummaryMetadata: Stores file path, summary text, last updated timestamp, and file hash       - Config: Defines the configuration settings for the RAG system     - Notable algorithms or patterns:       - Retrieval Augmented Generation (RAG): The system uses the Anthropic API to generate summaries that meet specific requirements for semantic search and question answering       - Recursive directory traversal: The walkDirectory function recursively processes all files in a directory, respecting the configured ignore rules     - Important dependencies/imports:       - @anthropic-ai/sdk: The Anthropic SDK for interacting with the Anthropic API       - dotenv: For loading environment variables from a .env file       - fs, path, crypto: Node.js built-in modules for file system operations and hashing     - Configuration requirements:       - ANTHROPIC_API_KEY: The API key for the Anthropic service, which is required for generating summaries       - summaryDir: The directory where the generated summaries will be stored       - ignoreDirs, ignoreFiles, ignoreExtensions: Configurable rules for excluding certain files and directories from processing   </key_components>   <dependencies>     - @anthropic-ai/sdk: The Anthropic SDK for interacting with the Anthropic API     - dotenv: For loading environment variables from a .env file   </dependencies>   <unique_characteristics>     - The rag.ts file implements a Retrieval Augmented Generation (RAG) system, which uses the Anthropic API to generate summaries optimized for semantic search and question answering.     - The system supports configurable ignore rules, allowing developers to exclude certain files and directories from the summary generation process.     - The generated summaries are stored as JSON files, with metadata including the file path, summary text, last updated timestamp, and a file hash to detect changes.   </unique_characteristics>   <methods>     calculateFileHash, generateSummary, saveSummary, shouldProcessFile, needsNewSummary, getSummaryMetadata, processFile, walkDirectory, getFileTypeSpecificPrompt, getComponentList, getDependencyInfo, truncateContent, main   </methods>   <exports if any>     None   </exports if any>   <any other information that you think an llm looking at a summary of all files in the repo would need to know>     The rag.ts file is the main entry point for the RAG system and orchestrates the summary generation and storage process. It is a critical component of the overall system and should be thoroughly understood to maintain and extend the functionality of the RAG system.   </any other information...> </summary>",
  "lastUpdated": "2025-01-30T19:11:40.079Z",
  "fileHash": "27e57b8665a62ef2d81daa006758ee9d"
}