{
  "filePath": "src\\rag.ts",
  "summary": "<summary>   <purpose>The rag.ts file is responsible for generating and saving summaries of files in a project, optimized for a Retrieval Augmented Generation (RAG) system. It supports various file types and provides a structured summary format to aid semantic search and question answering.</purpose>   <key_components>     - SummaryMetadata interface: Defines the structure of a file summary, including the file path, summary text, last updated timestamp, and file hash     - Config interface: Holds configuration options for the summary generation, such as the summary directory, directories and files to ignore, and file extensions to include     - calculateFileHash function: Calculates the MD5 hash of a file's content     - generateSummary function: Uses the Anthropic API to generate a summary of a file based on its content and file type     - saveSummary function: Saves the generated summary to a JSON file, including the metadata     - shouldProcessFile function: Determines whether a file should be processed based on the configured ignore patterns     - needsNewSummary function: Checks if a file's summary needs to be updated by comparing the current file hash with the stored hash     - getSummaryMetadata function: Reads the summary metadata from a JSON file     - processFile function: Handles the summary generation and saving for a single file     - walkDirectory function: Recursively processes all files in a directory     - main function: The entry point that initializes the summary generation process   </key_components>   <dependencies>     - dotenv: For loading environment variables     - fs/promises: For file system operations     - path: For working with file paths     - crypto: For calculating file hashes     - @anthropic-ai/sdk: For interacting with the Anthropic API   </dependencies>   <unique_characteristics>     - Utilizes the Anthropic API to generate summaries optimized for RAG systems, considering key entities, concepts, relationships, terminology, numerical data, and technical specifications     - Supports various file types, including TypeScript, JSON, and text files, with customizable prompts for each type     - Implements a metadata-based approach to efficiently update summaries only when the source file has changed     - Provides a structured summary format to facilitate semantic search and question answering     - Includes configurable options for ignoring directories, files, and file extensions   </unique_characteristics>   <methods>     calculateFileHash     generateSummary     saveSummary     shouldProcessFile     needsNewSummary     getSummaryMetadata     processFile     walkDirectory     main     getFileTypeSpecificPrompt     getComponentList     getDependencyInfo     truncateContent   </methods>   <exports if any>     None   </exports if any>   <any other information that you think an llm looking at a summary of all files in the repo would need to know>     This file is a key component of the project, as it enables the generation and management of file summaries to support a Retrieval Augmented Generation (RAG) system. The summaries can be used for semantic search, question answering, and other AI-powered applications that require a structured understanding of the project's content.   </any other information...> </summary>",
  "lastUpdated": "2025-01-31T23:14:30.215Z",
  "fileHash": "2c27374f71716bb05295774ad0a1d54e"
}