{
  "filePath": "src\\utils\\patterns\\patternMatcher.ts",
  "summary": "<summary> <purpose>The patternMatcher.ts file provides utilities for matching file paths against patterns, supporting both glob and regex patterns.</purpose> <key_components> - `PatternMatcher` class - `matchGlobPattern()`, `matchRegexPattern()`, `matchPattern()`, `matchAnyPattern()` methods - `createPattern()` and `parsePatternInput()` utility functions - `FilePattern` interface - `PatternError` custom error </key_components> <dependencies> - `FilePattern` type from `../types/directory` - `PatternError` from `../errors/customErrors` </dependencies> <unique_characteristics> - Provides a consistent interface for matching file paths against both glob and regex patterns - Supports parsing pattern input from CSV-like content - Throws custom `PatternError` exceptions for invalid patterns - Includes utility functions for converting glob patterns to regex and creating `FilePattern` objects </unique_characteristics> <methods> - `globToRegex(pattern: string): string` - `matchGlobPattern(path: string, pattern: string): boolean` - `matchRegexPattern(path: string, pattern: string): boolean` - `matchPattern(path: string, pattern: FilePattern): boolean` - `matchAnyPattern(path: string, patterns: FilePattern[]): boolean` - `createPattern(pattern: string, isRegex: boolean = false): FilePattern` - `parsePatternInput(content: string): FilePattern[]` </methods> <exports if any> - `PatternMatcher` class </exports if any> <any other information that you think an llm looking at a summary of all files in the repo would need to know> This file is part of a larger system that likely includes other modules for directory management, error handling, and potentially file/path manipulation. The `FilePattern` interface and `PatternError` class are likely used elsewhere in the codebase. </any other information...> </summary>",
  "lastUpdated": "2025-01-30T19:26:35.203Z",
  "fileHash": "935075059fb7ffc55958d7950328051c"
}