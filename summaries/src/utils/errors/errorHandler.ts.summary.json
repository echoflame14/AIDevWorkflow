{
  "filePath": "src\\utils\\errors\\errorHandler.ts",
  "summary": "<summary> <purpose>The errorHandler.ts file provides a centralized error handling mechanism for managing different types of errors in an application. It includes functions for handling general application errors, file system errors, and pattern matching errors.</purpose> <key_components> - `handleError(error, context, options)`: A function that handles application errors, logging them with consistent formatting and optionally throwing the error. - `handleFileSystemError(error, context, options)`: A specialized function for handling file system errors. - `handlePatternError(error, pattern, context, options)`: A specialized function for handling pattern matching errors. - `AppError`, `FileSystemError`, and `PatternError`: Custom error classes that extend the built-in `Error` class. - `ErrorHandlerOptions` interface: Defines the configuration options for the error handling functions. </key_components> <dependencies> The errorHandler.ts file depends on the custom error classes defined in the `customErrors.ts` file. </dependencies> <unique_characteristics> The errorHandler.ts file uses a consistent logging format for different types of errors, allowing for easier identification and debugging. It also provides the option to throw the error after handling it, enabling further error propagation and handling in the application. </unique_characteristics> <methods> - `handleError(error, context, options)` - `handleFileSystemError(error, context, options)` - `handlePatternError(error, pattern, context, options)` </methods> <exports if any> - `handleError` - `handleFileSystemError` - `handlePatternError` </exports if any> </summary>",
  "lastUpdated": "2025-01-30T19:26:14.532Z",
  "fileHash": "a2d3809be57ed571230e2196a7b957ed"
}