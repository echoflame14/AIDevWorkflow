{
  "filePath": "src\\utils\\fs\\fileReader.ts",
  "summary": "<summary>   <purpose>The primary purpose of this module is to provide a file reading utility with error handling and optional token counting functionality.</purpose>   <key_components>     - FileReader class     - readFile() and readFileSync() static methods     - isReadable() static method     - DEFAULT_OPTIONS constant     - calculateTokens() and checkFileSize() private static methods   </key_components>   <dependencies>     - fs (Node.js built-in file system module)     - FileReadError (custom error class)     - FileReadResult (custom type)     - PathUtils (utility module)   </dependencies>   <unique_characteristics>     - Provides a consistent API for reading files synchronously     - Handles file size limits and error conditions     - Supports optional token counting for content     - Leverages a static class design pattern   </unique_characteristics>   <methods>     - readFile(filepath, options)     - readFileSync(filepath, options)     - isReadable(filepath)     - calculateTokens(content)     - checkFileSize(filepath, maxSize)   </methods>   <exports if any>     - FileReader class   </exports if any>   <any other information that you think an llm looking at a summary of all files in the repo would need to know>     The FileReader class is a utility for reading files synchronously with error handling and optional token counting. It is designed to be used within a larger application or library that requires file reading functionality. The module has a focus on reliability and robustness, with features like file size validation and error handling to ensure consistent and predictable behavior when reading files.   </any other information...> </summary>",
  "lastUpdated": "2025-01-31T23:14:43.672Z",
  "fileHash": "3e8ccc481d7a4a2d29d31560c77f9142"
}