{
  "filePath": "src\\utils\\fs\\directoryScanner.ts",
  "summary": "<summary> <purpose>The directoryScanner.ts file provides a DirectoryScanner class that recursively scans a directory and its subdirectories, creating a hierarchical representation of the directory structure and file contents.</purpose> <key_components> - `DirectoryScanner` class: Responsible for scanning a directory and its subdirectories, creating a `DirectoryNode` representation of the directory structure. - `DirectoryNode` and `FileNode` interfaces: Represent the structure of a directory and a file, respectively. - `ScannerOptions` interface: Defines the configuration options for the `DirectoryScanner`. - `DirectoryError` class: Custom error type for handling directory scanning errors. - `createIgnorePatterns`, `createIncludeExtensions`, `shouldIgnorePath`, `shouldIncludeFile` functions: Utility functions for managing ignore patterns and file inclusion/exclusion. - `PatternMatcher` class: Utility for matching file paths against include patterns. - `FileReader` class: Utility for reading file contents and optionally counting tokens. </key_components> <dependencies> - `fs` (Node.js file system module) - `path` (Node.js path manipulation module) - `../types/directory` (custom directory-related types) - `../errors/customErrors` (custom error types) - `./pathUtils` (utility functions for working with file paths) - `./fileReader` (utility for reading file contents) - `../patterns/ignorePatterns` (utility functions for managing ignore patterns) - `../patterns/patternMatcher` (utility for matching file paths against patterns) </dependencies> <unique_characteristics> - Supports configurable ignore patterns and include/exclude file extensions - Provides recursive directory scanning with a structured `DirectoryNode` representation - Allows for optional token counting in files during the scanning process - Handles directory scanning errors with custom `DirectoryError` type </unique_characteristics> <methods> - `constructor(options: ScannerOptions)`: Initializes the `DirectoryScanner` with the provided options. - `shouldProcessFile(filepath: string)`: Determines if a file should be processed based on the configured ignore patterns and include extensions. - `createFileNode(filepath: string)`: Creates a `FileNode` from a file path, including reading the file content and optionally counting tokens. - `scanDirectory(dirPath: string)`: Recursively scans a directory, creating a `DirectoryNode` with its child `FileNode` and `DirectoryNode` objects. - `scan()`: Starts the directory scanning process from the root directory. </methods> <exports if any> - `DirectoryScanner` class </exports if any> <any other information...> The DirectoryScanner class is designed to provide a structured representation of a directory and its contents, with the ability to filter files based on ignore patterns and include extensions. It can be used in various scenarios, such as building file indexing or search systems, where a hierarchical understanding of a directory structure is required. </any other information...> </summary>",
  "lastUpdated": "2025-01-30T19:26:20.059Z",
  "fileHash": "2f3f1dea912b9349b43b248cd8500748"
}