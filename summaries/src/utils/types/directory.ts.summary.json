{
  "filePath": "src\\utils\\types\\directory.ts",
  "summary": "<summary> <purpose>The primary purpose of this module is to provide data structures and utilities for representing and working with a directory structure, including files and directories, and options for scanning and filtering the contents of a directory.</purpose> <key_components> - `BaseNode` interface: Defines the common properties of a file or directory node, including `name`, `path`, and `fullPath`. - `FileNode` interface: Extends `BaseNode` and represents a file, with additional properties like `content`, `tokenCount`, and `extension`. - `DirectoryNode` interface: Extends `BaseNode` and represents a directory, with a `children` property that holds the file and directory nodes contained within. - `FilePattern` interface: Defines a pattern for including or excluding files, with a `pattern` string and a flag indicating whether it's a regular expression. - `ScannerOptions` interface: Configures the options for directory scanning, including `includePatterns`, `calculateTokens`, `rootDir`, and `storeFileContent`. - `FileReadResult` interface: Represents the result of a file read operation, including the `content`, any `error`, and the `tokenCount`. </key_components> <dependencies> - `IgnoreOptions` from `../patterns/ignorePatterns` </dependencies> <unique_characteristics> This module provides a consistent data model for representing the structure of a directory, including both files and directories, and supports various options for customizing the scanning and filtering of the directory contents. The use of interfaces and data structures allows for type-safe and extensible handling of directory-related operations. </unique_characteristics> <methods> - `BaseNode.name` - `BaseNode.path` - `BaseNode.fullPath` - `FileNode.type` - `FileNode.content` - `FileNode.tokenCount` - `FileNode.extension` - `DirectoryNode.type` - `DirectoryNode.children` - `FilePattern.pattern` - `FilePattern.isRegex` - `ScannerOptions.includePatterns` - `ScannerOptions.calculateTokens` - `ScannerOptions.rootDir` - `ScannerOptions.storeFileContent` - `FileReadResult.content` - `FileReadResult.error` - `FileReadResult.tokenCount` </methods> <exports if any> - `BaseNode` - `FileNode` - `DirectoryNode` - `FilePattern` - `ScannerOptions` - `FileReadResult` </exports if any> </summary>",
  "lastUpdated": "2025-01-30T19:28:29.399Z",
  "fileHash": "26ede270e4c876338a5cf7a1d5492ce1"
}