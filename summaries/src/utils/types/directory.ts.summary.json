{
  "filePath": "src\\utils\\types\\directory.ts",
  "summary": "<summary>   <purpose>The directory.ts file defines the data structures and options for representing a directory structure, including files and subdirectories, along with utilities for scanning and reading files within the directory.</purpose>   <key_components>     - `BaseNode`: Interface representing the basic properties of a file or directory node     - `FileNode`: Interface extending `BaseNode` to represent a file, with optional content and token count     - `DirectoryNode`: Interface extending `BaseNode` to represent a directory, with a list of child nodes     - `FilePattern`: Interface representing a file inclusion/exclusion pattern, with a pattern string and a flag indicating whether it's a regular expression     - `ScannerOptions`: Interface defining the options for directory scanning, including include/exclude patterns, token count calculation, and root directory     - `FileReadResult`: Interface representing the result of a file read operation, including the content, any errors, and the token count   </key_components>   <dependencies>     - `../patterns/ignorePatterns`: Provides the `IgnoreOptions` interface for defining file/directory ignore patterns   </dependencies>   <unique_characteristics>     - Provides a consistent and extensible data model for representing directory structures, including both files and subdirectories     - Supports configurable file inclusion/exclusion patterns, including both glob patterns and regular expressions     - Offers the ability to calculate token counts for files, which can be useful for various applications     - Allows for optional storage of file content, which can be helpful in certain use cases   </unique_characteristics>   <methods>     - `BaseNode.name: string`     - `BaseNode.path: string`     - `BaseNode.fullPath: string`     - `FileNode.type: 'file'`     - `FileNode.content?: string`     - `FileNode.tokenCount?: number`     - `FileNode.extension?: string`     - `DirectoryNode.type: 'directory'`     - `DirectoryNode.children: (FileNode | DirectoryNode)[]`     - `FilePattern.pattern: string`     - `FilePattern.isRegex: boolean`     - `ScannerOptions.includePatterns?: FilePattern[]`     - `ScannerOptions.calculateTokens?: boolean`     - `ScannerOptions.rootDir?: string`     - `ScannerOptions.storeFileContent?: boolean`     - `FileReadResult.content: string`     - `FileReadResult.error?: Error`     - `FileReadResult.tokenCount?: number`   </methods>   <exports if any>     - `BaseNode`: Interface     - `FileNode`: Interface     - `DirectoryNode`: Interface     - `FilePattern`: Interface     - `ScannerOptions`: Interface     - `FileReadResult`: Interface   </exports if any> </summary>",
  "lastUpdated": "2025-01-31T23:15:01.875Z",
  "fileHash": "26ede270e4c876338a5cf7a1d5492ce1"
}